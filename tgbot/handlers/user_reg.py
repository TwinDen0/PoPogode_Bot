from aiogram import Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardRemove
from aiogram.types.input_media import InputMedia
from aiogram.dispatcher.filters import Text

from tgbot.database.sqlite_db import create_user, get_coord_db, get_city_sql, check_user_exists
from tgbot.keyboards.reply import ReplyMarkupName, get_reply_user
from tgbot.misc.states import UserStates
from tgbot.keyboards.inline import get_inline_user, InlineMarkupName
from tgbot.models.Coordinates import Coordinates
from tgbot.services.get_city import get_city
from tgbot.services.get_ip import get_coordinates, get_city_from_coord
from tgbot.services.get_weather import get_weather


async def start(message: types.Message):
	user_exists = check_user_exists(message.chat.id)
	if user_exists:
		await message.answer('–ü—Ä–∏–≤–µ—Ç!üëãüèª\n\n–Ø - —Ç–≤–æ–π <b>–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –æ–¥–µ–∂–¥—ã</b>üå§\n\n'
		                     '–Ø –ø–æ–º–æ–≥—É —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ –∏ –¥–∞–º '
							 '—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É –æ–¥–µ–∂–¥—ã/–æ–±—É–≤–∏/–∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤!\n\n'
		                     '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, —á—Ç–æ –≤–∞–º —Å—Ç–æ–∏—Ç –Ω–∞–¥–µ—Ç—å, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /clothes',
		                     parse_mode="html",
		                     reply_markup=ReplyKeyboardRemove())
	else:
		await message.bot.send_chat_action(message.chat.id, 'typing')
		await UserStates.pref_coord.set()
		await message.answer('–ü—Ä–∏–≤–µ—Ç!üëãüèª\n\n–Ø - —Ç–≤–æ–π <b>–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –æ–¥–µ–∂–¥—ã</b>üå§\n\n'
		                     '–Ø –ø–æ–º–æ–≥—É —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ –∏ –¥–∞–º '
							 '—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É –æ–¥–µ–∂–¥—ã/–æ–±—É–≤–∏/–∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤!\n\n',
		                     parse_mode="html",
		                     reply_markup=ReplyKeyboardRemove())
		await find_city(message)

async def find_city(message: types.Message, change = False):
	await UserStates.pref_coord.set()
	await message.answer('<i>–£–∑–Ω–∞—é –≤–∞—à –≥–æ—Ä–æ–¥...</i>',
	                     parse_mode="html")

	coord = get_coordinates()
	city = get_city_from_coord(coord)
	markup = get_inline_user(InlineMarkupName.pref_coord)
	create_user(message.from_user.id, message.from_user.username, message.from_user.first_name, city,
	            [coord.latitude, coord.longitude])
	if change:
		pref = 1
	else:
		pref = 2
	await message.bot.delete_message(chat_id=message.chat.id, message_id=message.message_id+pref)
	await message.answer(f"–í–∞—à –≥–æ—Ä–æ–¥: <b>{city}</b>\n–í–µ—Ä–Ω–æ?", parse_mode="html", reply_markup=markup)


async def pref_coord_yes(call: types.CallbackQuery, state: FSMContext):
	await UserStates.weather.set()
	await end_reg(call.message)


async def pref_coord_no(call: types.CallbackQuery, state: FSMContext):
	await call.message.delete()
	await UserStates.location.set()
	markup = get_reply_user(ReplyMarkupName.locale)
	await call.message.answer("–¢–æ–≥–¥–∞:\n"
	                          "‚úçüèª <b>–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ</b> —Å–≤–æ–µ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –∏–ª–∏\n"
	                          "üó∫ <b>–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é!</b>", parse_mode="html", reply_markup=markup)


async def location(message: types.Message, state: FSMContext):
	# –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	coord = [message.location.latitude, message.location.longitude]
	city = get_city_from_coord(Coordinates(latitude=coord[0], longitude=coord[1]))
	create_user(message.from_user.id, message.from_user.username, message.from_user.first_name, city, coord)
	# –í—ã–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
	await end_reg(message)


async def city(message: types.Message, state: FSMContext):
	city, coord = get_city(message.text)
	create_user(message.from_user.id, message.from_user.username, message.from_user.first_name, city, coord)
	markup = get_inline_user(InlineMarkupName.city)
	await message.answer(f"–£–∫–∞–∑–∞–Ω –≥–æ—Ä–æ–¥: <b>{city}</b>\n–í–µ—Ä–Ω–æ?", reply_markup=markup)
async def city_yes(call: types.CallbackQuery, state: FSMContext):
	await UserStates.weather.set()
	await end_reg(call.message)
async def city_no(call: types.CallbackQuery, state: FSMContext):
	await call.message.answer(f"–ù–∞–ø–∏—à–∏ –≥–æ—Ä–æ–¥ –µ—â—ë —Ä–∞–∑:")


async def end_reg(message: types.Message):
	city = get_city_sql(message.chat.id)
	await message.edit_text(f"–í–∞—à –≥–æ—Ä–æ–¥: <b>{city}</b>", reply_markup=None)
	await UserStates.weather.set()
	markup = get_inline_user(InlineMarkupName.end_reg)
	await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –≤–∞–º –Ω–∞–¥–µ—Ç—å!", reply_markup=markup)


def register_user_reg(dp: Dispatcher):
	dp.register_message_handler(start, commands="start", state='*')
	dp.register_callback_query_handler(pref_coord_yes, Text(startswith="pref_yes"), state=UserStates.pref_coord)
	dp.register_callback_query_handler(pref_coord_no, Text(startswith="pref_no"), state=UserStates.pref_coord)
	dp.register_message_handler(location, content_types='location', state=UserStates.location)
	dp.register_message_handler(city, state=UserStates.location)
	dp.register_callback_query_handler(city_yes, Text(startswith="city_yes"), state=UserStates.location)
	dp.register_callback_query_handler(city_no, Text(startswith="city_no"), state=UserStates.location)
