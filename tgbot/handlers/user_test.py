from aiogram import Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types.input_media import InputMedia
from aiogram.dispatcher.filters import Text

from tgbot.database.sqlite_db import create_user, get_coord_db, get_city_sql
from tgbot.handlers.user_weather import get_clothes_mess
from tgbot.keyboards.reply import ReplyMarkupName, get_reply_user
from tgbot.misc.states import UserStates
from tgbot.keyboards.inline import get_inline_user, InlineMarkupName
from tgbot.models.Coordinates import Coordinates
from tgbot.models.SimpleWeather import SimpleWeather
from tgbot.services.get_city import get_city
from tgbot.services.get_ip import get_coordinates, get_city_from_coord
from tgbot.services.get_weather import get_weather
from aiogram.dispatcher.filters.state import State, StatesGroup


class TestStates(StatesGroup):
	temp = State()
	descript = State()
	weather = State()

async def start_test(message: types.Message):
	await message.bot.send_chat_action(message.chat.id, 'typing')
	await TestStates.temp.set()
	await message.answer('<i>–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.</i>\n\n'
	                     '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n'
	                     '‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞;\n'
	                     '‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã;\n\n'
	                     '<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É, –Ω–∞–ø—Ä–∏–º–µ—Ä "-20":</b>',
	                     parse_mode="html",
	                     reply_markup=ReplyKeyboardRemove())

temp = "-10"

async def get_temp(message: types.Message, state: FSMContext):
	global temp
	temp = message.text
	await TestStates.descript.set()
	if int(temp) > 0:
		markup = InlineKeyboardMarkup(
			inline_keyboard=[
				[
					InlineKeyboardButton('–Ø—Å–Ω–æ‚òÄÔ∏è', callback_data='test_descript_clear'),
					InlineKeyboardButton('–û–±–ª–∞—á–Ω–æ‚õÖÔ∏è', callback_data='test_descript_clouds'),
				],
				[
					InlineKeyboardButton('–î–æ–∂–¥—åüå¶', callback_data='test_descript_rain'),
					InlineKeyboardButton('–õ–∏–≤–µ–Ω—åüåß', callback_data='test_descript_drizzle'),
				],
				[
					InlineKeyboardButton('–ì—Ä–æ–∑–∞üå©', callback_data='test_descript_thunderstorm'),
					InlineKeyboardButton('–¢—É–º–∞–Ωüå´', callback_data='test_descript_mist'),
				],
			]
		)
	elif int(temp) < 0:
		markup = InlineKeyboardMarkup(
			inline_keyboard=[
				[
					InlineKeyboardButton('–Ø—Å–Ω–æ‚òÄÔ∏è', callback_data='test_descript_clear'),
					InlineKeyboardButton('–û–±–ª–∞—á–Ω–æ‚õÖÔ∏è', callback_data='test_descript_clouds'),
				],
				[
					InlineKeyboardButton('–°–Ω–µ–≥‚ùÑÔ∏è', callback_data='test_descript_snow'),
					InlineKeyboardButton('–¢—É–º–∞–Ωüå´', callback_data='test_descript_mist'),
				],
			]
		)
	else:
		markup = InlineKeyboardMarkup(
			inline_keyboard=[
				[
					InlineKeyboardButton('–Ø—Å–Ω–æ‚òÄÔ∏è', callback_data='test_descript_clear'),
					InlineKeyboardButton('–û–±–ª–∞—á–Ω–æ‚õÖÔ∏è', callback_data='test_descript_clouds'),
				],
				[
					InlineKeyboardButton('–î–æ–∂–¥—åüå¶', callback_data='test_descript_rain'),
					InlineKeyboardButton('–õ–∏–≤–µ–Ω—åüåß', callback_data='test_descript_drizzle'),
				],
				[
					InlineKeyboardButton('–ì—Ä–æ–∑–∞üå©', callback_data='test_descript_thunderstorm'),
					InlineKeyboardButton('–¢—É–º–∞–Ωüå´', callback_data='test_descript_mist'),
				],
				[
					InlineKeyboardButton('–°–Ω–µ–≥‚ùÑÔ∏è', callback_data='test_descript_snow'),
				],
			]
		)

	await message.answer('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–≤–µ–¥–µ–Ω–∞.\n\n'
	                     '<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã:</b>',
	                     parse_mode="html",
	                     reply_markup=markup)

async def get_descript(call: types.CallbackQuery, state: FSMContext):
	descript = call.data.split("_")[2]

	if descript == "clear":
		descript = "–Ø—Å–Ω–æ‚òÄÔ∏è"
	if descript == "clouds":
		descript = "–û–±–ª–∞—á–Ω–æ‚õÖÔ∏è"
	if descript == "rain":
		descript = "–î–æ–∂–¥—åüå¶"
	if descript == "drizzle":
		descript = "–õ–∏–≤–µ–Ω—åüåß"
	if descript == "thunderstorm":
		descript = "–ì—Ä–æ–∑–∞üå©"
	if descript == "snow":
		descript = "–°–Ω–µ–≥‚ùÑÔ∏è"
	if descript == "mist":
		descript = "–¢—É–º–∞–Ωüå´"

	await call.bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

	await call.message.answer('–ü–æ–ª—É—á–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n'
		                      f'‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ = {temp}\n'
		                      f'‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã = {descript}\n\n'
		                      f'<i>–ó–∞–ø—É—Å–∫–∞—é –ø–æ–¥–±–æ—Ä –æ–¥–µ–∂–¥—ã</i>',
	                          parse_mode="html")


	test_data = SimpleWeather(weather_description=descript, cur_weather=temp, humidity='', pressure='', wind='',
                     uvi='')

	await state.reset_state()
	await get_clothes_mess(call, state, test_data)


def register_user_test(dp: Dispatcher):
	dp.register_message_handler(start_test, commands="test", state='*')
	dp.register_message_handler(get_temp, state=TestStates.temp)
	dp.register_callback_query_handler(get_descript, Text(startswith="test_descript"), state=TestStates.descript)
